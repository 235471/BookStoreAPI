openapi: 3.0.0
info:
  title: API Bookstore
  version: '0.0.1'
  description: Comprehensive API documentation detailing the Create, Read, Update, and Delete (CRUD) operations for books, authors, and publishers.
servers:
  - url: http://localhost:3000 # Ensure this matches your local server's URL
components:
  responses:
    InternalServerError:
      description: Internal server error
    NotFound:
      description: Resource not found
    BadRequest:
      description: Bad Request
    Created:
      description: Created Successfully
    OK:
      description: OK
  schemas:
    ID:
      type: string
      description: Unique identifier (MongoDB ObjectId)
      example: 507f1f77bcf86cd799439011
      pattern: ^[a-fA-f\d]{24}$
    Book:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        title:
          type: string
          description: The title of the book
          example: The Great Gatsby
        lancamento:
          type: string
          description: Books publish year
          example: 2020
        descricao:
          type: string
          description: Short description about the book
          example: A marvelous fantasy setting in a new world
        paginas:
          type: integer
          description: Number of pages the book has
          example: 323
        preco:
          type: number
          description: Book price
          example: 50.95
        autor:
          $ref: '#/components/schemas/ID'
        editora:
          $ref: '#/components/schemas/ID'
    Author:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: Author name
          example: Jane Austen
        nationality:
          type: string
          description: Country where he/she was born
          example: British
        birthDate:
          type: string
          description: Birthday date
          example: 2004-06-21
        biography:
          type: string
          description: Short biography
          example: Jane Austen was an English novelist known for her witty social commentary and sharp observations of human nature
    Publisher:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        razaoSocial:
          type: string
          description: Company legal name registered with the Government
          example: GOOGLE BRASIL INTERNET LTDA
        nomeFantasia:
          type: string
          description: Company name that is recognized by the public
          example: Google
        cnpj:
          type: string
          description: Company register number with the Government
          example: 11.122.204/0001-11
        telefone:
          type: array
          items:
            type: string
            description: Publisher contact information
            example: (11) 95487-3281, (11) 3378-2278
        endereco:
          type: object
          properties:
            logradouro:
              type: string
              description: Publisher's street address
              example: 5th Avenue
            bairro:
              type: string
              description: Publisher's district address
              example: Brooklyn
            cidade:
              type: string
              description: Publisher's city address
              example: New York
            municipio:
              type: string
              description: Publisher's state address
              example: NY
            numero:
              type: string
              description: Publisher's address number
              example: 5th Avenue, 105
            complemento:
              type: string
              description: Publisher's address complematary info
              example: 5th Avenue, 105, 8th floor 807
            cep:
              type: string
              description: Publisher's postal code
              example: 01100-001

            email:
              type: array
              items:
                type: string
                description: Publisher e-mail information
                example: publisher@gmail.com, publisher@hotmail.com
            website:
              type: string
              description: Publisher website
              example: www.fantasybooks.com
            redesSociais:
              type: array
              items:
                type: string
                description: Publisher social media info
                example: www.instagram.com/fantasybooks, www.x.com/fantasybooks
            status:
              type: string
              description: Company status with the Government
              example: active or inactive
tags:
  - name: Book Routes
    description: CRUD operations for managing books
  - name: Author Routes
    description: CRUD operations for managing authors
  - name: Publisher Routes
    description: CRUD operations for managing publishers
paths:
  /books:
    get:
      summary: Returns a list of books
      description: Retrieve all books available in the store
      tags: [Book Routes]
      responses:
        200:
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Add a new book to the database
      description: This route allow you to save books
      tags: [Book Routes]
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        201:
          description: Book created successfully!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /books/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the book you want to access
        schema:
          type: string
    get:
      summary: Returns a single book by it's ID
      description: This route allows to retrieve one book by it's id
      tags: [Book Routes]
      responses:
        200:
          description: Full book information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update an existing book
      description: This route allows you to update the details of an existing book by its ID.
      tags: [Book Routes]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        200:
          description: Book updated successfully!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete an existing book
      description: This route allows you to delete a existing book by its ID.
      tags: [Book Routes]
      responses:
        204:
          description: Book deleted successfully!
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /books/search:
    get:
      summary: Returns a list of books within the defined query
      description: Retrieve all books that match the query
      tags: [Book Routes]
      parameters:
        - in: query
          name: titulo
          required: false
          description: Book Title
          schema:
            type: string
        - in: query
          name: autor.name
          required: false
          description: Book's Author
          schema:
            type: string
        - in: query
          name: autor.nationality
          required: false
          description: Author's nationality
          schema:
            type: string
        - in: query
          name: editora.razaoSocial
          required: false
          description: Publisher legal name with the Government
          schema:
            type: string     
        - in: query
          name: editora.nomeFantasia
          required: false
          description: Publisher name recognize by the public
          schema:
            type: string                                         
      responses:
        200:
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /author:
    get:
      summary: Returns a list of authors
      description: Retrieve all authors registered
      tags: [Author Routes]
      responses:
        200:
          description: A list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Add a new author to the database
      description: This route allow you to save a new author
      tags: [Author Routes]
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        201:
          description: Author created successfully!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
  /author/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the author you want to access
        schema:
          type: string
    get:
      summary: Returns a single author by it's ID
      description: This route allows to retrieve one author by it's id
      tags: [Author Routes]
      responses:
        200:
          description: Author information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update an existing author
      description: This route allows you to update the details of an existing author by its ID.
      tags: [Author Routes]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        200:
          description: Author updated successfully!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete an existing author
      description: This route allows you to delete a existing author by its ID.
      tags: [Author Routes]
      responses:
        204:
          description: Author deleted successfully!
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /author/search:
    get:
      summary: Returns a list of authors within the defined query
      description: Retrieve all authors that match the query
      tags: [Author Routes]
      parameters:
        - in: query
          name: name
          required: false
          description: Author by name
          schema:
            type: string
        - in: query
          name: nationality
          required: false
          description: Authors by nationality
          schema:
            type: string
      responses:
        200:
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /publisher:
    get:
      summary: Returns a list of publishers
      description: Retrieve all publishers registered
      tags: [Publisher Routes]
      responses:
        200:
          description: A list of publishers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Publisher'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Add a new publisher to the database
      description: This route allow you to save a new publisher
      tags: [Publisher Routes]
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Publisher'
      responses:
        201:
          description: publisher created successfully!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Publisher'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
  /publisher/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the publisher you want to access
        schema:
          type: string
    get:
      summary: Returns a single publisher by it's ID
      description: This route allows to retrieve one publisher by it's id
      tags: [Publisher Routes]
      responses:
        200:
          description: Publisher information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update an existing publisher
      description: This route allows you to update the details of an existing publisher by its ID.
      tags: [Publisher Routes]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publisher'
      responses:
        200:
          description: Publisher updated successfully!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete an existing publisher
      description: This route allows you to delete a existing publisher by its ID.
      tags: [Publisher Routes]
      responses:
        204:
          description: Publisher deleted successfully!
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /publisher/search:
    get:
      summary: Returns a list of publishers within the defined query
      description: Retrieve all publishers that match the query
      tags: [Publisher Routes]
      parameters:
        - in: query
          name: razaoSocial
          required: false
          description: Publisher by company name
          schema:
            type: string
        - in: query
          name: cnpj
          required: false
          description: Publisher by cnpj register with government
          schema:
            type: string
      responses:
        200:
          description: A list of publishers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Publisher'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
